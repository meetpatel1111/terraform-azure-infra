name: Terraform Azure IaC

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (drives env/<environment>.tfvars)"
        type: choice
        required: true
        options: [dev, uat, prod]
        default: dev
      tf_action:
        description: "Terraform action"
        type: choice
        options: [plan, apply, destroy, refresh]
        required: true
        default: plan
      environment_type:
        description: "Env type code (np/p) for naming (locals.tf)"
        type: choice
        options: [np, p]
        required: true
        default: np
      location:
        description: "Azure region display name (e.g., 'UK South')"
        type: string
        required: true
        default: "UK South"
      location_code:
        description: "Short region code used in names (e.g., 'uks')"
        type: string
        required: true
        default: "uks"
      tf_version:
        description: "Terraform version"
        type: string
        required: false
        default: "1.7.5"
      backend_rg:
        default: "tfstate-uks-shared-rg"
        description: "Backend: Resource Group"
        type: string
        required: true
      backend_storage_account:
        default: "sttfstateshared"
        description: "Backend: Storage Account"
        type: string
        required: true
      backend_container:
        default: "tfstate"
        description: "Backend: Blob Container"
        type: string
        required: true
      backend_key_prefix:
        description: "Backend key prefix, e.g. iac/core"
        type: string
        required: false
        default: "iac/core"

jobs:
  terraform:
    name: Terraform ${{ inputs.tf_action }} (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    defaults:
      run:
        shell: bash

    env:
      ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      TF_VAR_environment_type: ${{ inputs.environment_type }}
      TF_VAR_environment_name: ${{ inputs.environment }}
      TF_VAR_location: ${{ inputs.location }}
      TF_VAR_location_code: ${{ inputs.location_code }}

      BACKEND_RG:        ${{ inputs.backend_rg }}
      BACKEND_SA:        ${{ inputs.backend_storage_account }}
      BACKEND_CONTAINER: ${{ inputs.backend_container }}
      # Backend state blob will be <prefix>/<env>.tfstate, e.g., iac/core/dev.tfstate
      BACKEND_KEY:       ${{ inputs.backend_key_prefix }}/${{ inputs.environment }}.tfstate

      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform Version
        run: echo "TF_VERSION=${{ inputs.tf_version }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JSON }}

      - name: Display Azure context
        run: |
          az account show
          echo "Backend key: ${BACKEND_KEY}"

      # Ensure backend and grab the storage account key for all data-plane ops
      - name: Ensure Backend (RG/SA/Container) using account key
        id: ensure_backend
        run: |
          set -euo pipefail

          az group create -n "${BACKEND_RG}" -l "${{ inputs.location }}" >/dev/null

          if ! az storage account show -n "${BACKEND_SA}" -g "${BACKEND_RG}" >/dev/null 2>&1; then
            az storage account create \
              -n "${BACKEND_SA}" -g "${BACKEND_RG}" -l "${{ inputs.location }}" \
              --sku Standard_LRS --kind StorageV2 --allow-blob-public-access false --min-tls-version TLS1_2 >/dev/null
          fi

          az storage account blob-service-properties update \
            -n "${BACKEND_SA}" -g "${BACKEND_RG}" \
            --enable-versioning true \
            --enable-change-feed true \
            --enable-delete-retention true --delete-retention-days 7 \
            --enable-container-delete-retention true --container-delete-retention-days 7 >/dev/null

          # Get account key for data-plane ops (avoids needing Blob Data RBAC)
          STORAGE_KEY=$(az storage account keys list -g "${BACKEND_RG}" -n "${BACKEND_SA}" --query "[0].value" -o tsv)
          echo "storage_key=${STORAGE_KEY}" >> "$GITHUB_OUTPUT"

          if ! az storage container show \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null 2>&1; then
            az storage container create \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null
          fi
          echo "✅ Backend ready."

      - name: Select tfvars
        id: tfvars
        run: |
          FILE="env/${{ inputs.environment }}.tfvars"
          [ -f "$FILE" ] || (echo "Missing env file $FILE" && exit 1)
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Terraform Init (remote backend)
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=${BACKEND_RG}" \
            -backend-config="storage_account_name=${BACKEND_SA}" \
            -backend-config="container_name=${BACKEND_CONTAINER}" \
            -backend-config="key=${BACKEND_KEY}"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      # ---------- Show current state (helps catch empty/incorrect state) ----------
      - name: Show backend state content (resource list)
        run: |
          set -euo pipefail
          terraform state pull > current.tfstate || true
          echo "State blob key: ${BACKEND_KEY}"
          echo "Resource list:"
          terraform state list || echo "(state empty)"

      # ---------- PLAN ----------
      - name: Terraform Plan (writes <env>.tfplan)
        if: ${{ inputs.tf_action == 'plan' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -input=false -var-file="$TFVARS_FILE" -out="${{ inputs.environment }}.tfplan"

      - name: Upload <env>.tfplan
        if: ${{ inputs.tf_action == 'plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}.tfplan
          path: ${{ inputs.environment }}.tfplan
          if-no-files-found: error
          retention-days: 10

      # ---------- APPLY ----------
      - name: Terraform Apply (plan → apply, <env>.tfplan)
        if: ${{ inputs.tf_action == 'apply' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -input=false -var-file="$TFVARS_FILE" -out="${{ inputs.environment }}.tfplan"
          terraform apply -input=false -auto-approve "${{ inputs.environment }}.tfplan"

      - name: Ensure backend <env>.tfstate exists (post-apply)
        if: ${{ inputs.tf_action == 'apply' }}
        env:
          STORAGE_KEY: ${{ steps.ensure_backend.outputs.storage_key }}
        run: |
          set -euo pipefail
          EXISTS=$(az storage blob exists \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}" --query exists -o tsv)
          if [ "${EXISTS}" != "true" ]; then
            terraform state pull > "${{ inputs.environment }}.tfstate"
            az storage blob upload \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" \
              --container-name "${BACKEND_CONTAINER}" \
              --name "${BACKEND_KEY}" \
              --file "${{ inputs.environment }}.tfstate" \
              --overwrite true >/dev/null
            echo "Created backend state: ${BACKEND_KEY}"
          else
            echo "Backend state exists: ${BACKEND_KEY}"
          fi

      # ---------- DESTROY ----------
      - name: Guard: state must not be empty before destroy
        if: ${{ inputs.tf_action == 'destroy' }}
        run: |
          set -euo pipefail
          terraform state pull > current.tfstate || true
          COUNT=$(jq '.resources | length' current.tfstate 2>/dev/null || echo 0)
          echo "Resource count in state: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            echo "ERROR: Backend state is empty. Check BACKEND_KEY and workspace."
            echo "Current backend key: ${BACKEND_KEY}"
            exit 1
          fi

      - name: Terraform Destroy (plan-destroy → apply)
        if: ${{ inputs.tf_action == 'destroy' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -destroy -input=false -var-file="$TFVARS_FILE" -out=tfplan-destroy
          terraform apply -input=false -auto-approve tfplan-destroy

      # ---------- REFRESH ----------
      - name: Terraform Refresh (state-only)
        if: ${{ inputs.tf_action == 'refresh' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform refresh -input=false -var-file="$TFVARS_FILE"

      - name: Ensure backend <env>.tfstate exists (post-refresh)
        if: ${{ inputs.tf_action == 'refresh' }}
        env:
          STORAGE_KEY: ${{ steps.ensure_backend.outputs.storage_key }}
        run: |
          set -euo pipefail
          EXISTS=$(az storage blob exists \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}" --query exists -o tsv)
          if [ "${EXISTS}" != "true" ]; then
            terraform state pull > "${{ inputs.environment }}.tfstate"
            az storage blob upload \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" \
              --container-name "${BACKEND_CONTAINER}" \
              --name "${BACKEND_KEY}" \
              --file "${{ inputs.environment }}.tfstate" \
              --overwrite true >/dev/null
            echo "Created backend state: ${BACKEND_KEY}"
          else
            echo "Backend state exists: ${BACKEND_KEY}"
          fi
