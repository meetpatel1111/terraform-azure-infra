name: Terraform Azure IaC

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (drives env/<environment>.tfvars)"
        type: choice
        required: true
        options: [dev, uat, prod]
        default: dev
      tf_action:
        description: "Terraform action"
        type: choice
        options: [plan, apply, destroy, refresh, import]  # added import
        required: true
        default: plan
      environment_type:
        description: "Env type code (np/p) for naming (locals.tf)"
        type: choice
        options: [np, p]
        required: true
        default: np
      tf_version:
        description: "Terraform version"
        type: string
        required: false
        default: "1.7.5"
      backend_rg:
        default: "tfstate-uks-shared-rg"
        description: "Backend: Resource Group"
        type: string
        required: true
      backend_storage_account:
        default: "sttfstateshared"
        description: "Backend: Storage Account"
        type: string
        required: true
      backend_container:
        default: "tfstate"
        description: "Backend: Blob Container"
        type: string
        required: true
      backend_key_prefix:
        description: "Backend key prefix, e.g. iac/core"
        type: string
        required: false
        default: "iac/core"
      import_pairs:
        description: |-
          (import) One per line; '=' or '|' separator.
          Example:
            azurerm_resource_group.example=/subscriptions/.../resourceGroups/my-rg-prod
            azurerm_key_vault_access_policy.current[0]|/subscriptions/.../objectId/<GUID>
        type: string
        required: false
        default: ""

jobs:
  terraform:
    name: Terraform ${{ inputs.tf_action }} (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    defaults:
      run:
        shell: bash

    env:
      ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      TF_VAR_environment_type: ${{ inputs.environment_type }}
      TF_VAR_environment_name: ${{ inputs.environment }}

      BACKEND_RG:        ${{ inputs.backend_rg }}
      BACKEND_SA:        ${{ inputs.backend_storage_account }}
      BACKEND_CONTAINER: ${{ inputs.backend_container }}
      BACKEND_KEY:       ${{ inputs.backend_key_prefix }}/${{ inputs.environment }}.tfstate

      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Terraform version
        run: echo "TF_VERSION=${{ inputs.tf_version }}" >> "$GITHUB_ENV"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JSON }}

      - name: Display Azure context
        run: |
          az account show
          echo "Backend key: ${BACKEND_KEY}"

      - name: Select tfvars
        id: tfvars
        run: |
          set -euo pipefail
          FILE="env/${{ inputs.environment }}.tfvars"
          if [ ! -f "$FILE" ]; then
            echo "Missing env file $FILE"
            exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Derive location from tfvars
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          # Try to extract:  location = "UK South"
          LOC=$(awk -F'"' '/^[[:space:]]*location[[:space:]]*=/ {print $2; exit}' "$TFVARS_FILE" || true)
          if [ -z "$LOC" ]; then LOC="UK South"; fi
          echo "Using location: $LOC"
          echo "BACKEND_LOCATION=$LOC" >> "$GITHUB_ENV"

      - name: Ensure backend (RG/SA/Container) using account key
        id: ensure_backend
        run: |
          set -euo pipefail
          az group create -n "${BACKEND_RG}" -l "${BACKEND_LOCATION}" >/dev/null
          if ! az storage account show -n "${BACKEND_SA}" -g "${BACKEND_RG}" >/dev/null 2>&1; then
            az storage account create \
              -n "${BACKEND_SA}" -g "${BACKEND_RG}" -l "${BACKEND_LOCATION}" \
              --sku Standard_LRS --kind StorageV2 --allow-blob-public-access false --min-tls-version TLS1_2 >/dev/null
          fi
          az storage account blob-service-properties update \
            -n "${BACKEND_SA}" -g "${BACKEND_RG}" \
            --enable-versioning true \
            --enable-change-feed true \
            --enable-delete-retention true --delete-retention-days 7 \
            --enable-container-delete-retention true --container-delete-retention-days 7 >/dev/null
          STORAGE_KEY=$(az storage account keys list -g "${BACKEND_RG}" -n "${BACKEND_SA}" --query "[0].value" -o tsv)
          echo "storage_key=${STORAGE_KEY}" >> "$GITHUB_OUTPUT"
          if ! az storage container show \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null 2>&1; then
            az storage container create \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null
          fi
          echo "Backend ready."

      - name: Terraform init (remote backend)
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=${BACKEND_RG}" \
            -backend-config="storage_account_name=${BACKEND_SA}" \
            -backend-config="container_name=${BACKEND_CONTAINER}" \
            -backend-config="key=${BACKEND_KEY}"

      # -------------------------------
      # Terraform import (heredoc-free)
      # -------------------------------
      - name: Terraform import
        if: ${{ inputs.tf_action == 'import' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          printf "%s\n" "${{ inputs.import_pairs }}" > imports.txt

          do_import () {
            local address="$1"
            local id="$2"
            echo "::group::terraform import ${address}"
            echo "ID: ${id}"
            terraform import -input=false -var-file="${TFVARS_FILE}" "${address}" "${id}"
            terraform state show "${address}" || true
            echo "::endgroup::"
          }

          if [ -s imports.txt ] && [ "$(wc -c < imports.txt)" -gt 1 ]; then
            echo "Processing multiple imports from import_pairs..."
            while IFS= read -r line; do
              line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
              [ -z "$line" ] && continue
              if echo "$line" | grep -q '='; then
                addr="${line%%=*}"
                rid="${line#*=}"
              else
                addr="${line%%|*}"
                rid="${line#*|}"
              fi
              [ -z "$addr" ] || [ -z "$rid" ] && { echo "Skipping malformed line: $line"; continue; }
              do_import "$addr" "$rid"
            done < imports.txt
          else
            echo "No import_pairs provided; nothing to import."
          fi

          echo "Imports completed."

      - name: Terraform fmt
        run: terraform fmt -check -recursive

      - name: Terraform validate
        run: terraform validate

      - name: Show backend state content (resource list)
        run: |
          set -euo pipefail
          terraform state pull > current.tfstate || true
          echo "State blob key: ${BACKEND_KEY}"
          echo "Resource list:"
          terraform state list || echo "(state empty)"

      - name: Terraform plan (writes <env>.tfplan)
        if: ${{ inputs.tf_action == 'plan' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -input=false -var-file="$TFVARS_FILE" -out="${{ inputs.environment }}.tfplan"

      - name: Upload plan artifact
        if: ${{ inputs.tf_action == 'plan' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}.tfplan
          path: ${{ inputs.environment }}.tfplan
          if-no-files-found: error
          retention-days: 10

      - name: Terraform apply (from <env>.tfplan)
        if: ${{ inputs.tf_action == 'apply' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -input=false -var-file="$TFVARS_FILE" -out="${{ inputs.environment }}.tfplan"
          terraform apply -input=false -auto-approve "${{ inputs.environment }}.tfplan"

      - name: Ensure backend state exists (post-apply)
        if: ${{ inputs.tf_action == 'apply' }}
        env:
          STORAGE_KEY: ${{ steps.ensure_backend.outputs.storage_key }}
        run: |
          set -euo pipefail
          EXISTS=$(az storage blob exists \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}" --query exists -o tsv)
          if [ "${EXISTS}" != "true" ]; then
            terraform state pull > "${{ inputs.environment }}.tfstate"
            az storage blob upload \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" \
              --container-name "${BACKEND_CONTAINER}" \
              --name "${BACKEND_KEY}" \
              --file "${{ inputs.environment }}.tfstate" \
              --overwrite true >/dev/null
            echo "Created backend state at ${BACKEND_KEY}"
          else
            echo "Backend state exists at ${BACKEND_KEY}"
          fi

      - name: Guard - state must not be empty before destroy
        if: ${{ inputs.tf_action == 'destroy' }}
        run: |
          set -euo pipefail
          terraform state pull > current.tfstate || true
          COUNT=$(jq '.resources | length' current.tfstate 2>/dev/null || echo 0)
          echo "Resource count in state: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            echo "ERROR: Backend state is empty. Check BACKEND_KEY and workspace."
            echo "Current backend key: ${BACKEND_KEY}"
            exit 1
          fi

      - name: Terraform destroy
        if: ${{ inputs.tf_action == 'destroy' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform plan -destroy -input=false -var-file="$TFVARS_FILE" -out=tfplan-destroy
          terraform apply -input=false -auto-approve tfplan-destroy

      - name: Terraform refresh (state-only)
        if: ${{ inputs.tf_action == 'refresh' }}
        run: |
          set -euo pipefail
          TFVARS_FILE="${{ steps.tfvars.outputs.file }}"
          terraform refresh -input=false -var-file="$TFVARS_FILE"

      - name: Ensure backend state exists (post-refresh)
        if: ${{ inputs.tf_action == 'refresh' }}
        env:
          STORAGE_KEY: ${{ steps.ensure_backend.outputs.storage_key }}
        run: |
          set -euo pipefail
          EXISTS=$(az storage blob exists \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}" --query exists -o tsv)
          if [ "${EXISTS}" != "true" ]; then
            terraform state pull > "${{ inputs.environment }}.tfstate"
            az storage blob upload \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" \
              --container-name "${BACKEND_CONTAINER}" \
              --name "${BACKEND_KEY}" \
              --file "${{ inputs.environment }}.tfstate" \
              --overwrite true >/dev/null
            echo "Created backend state at ${BACKEND_KEY}"
          else
            echo "Backend state exists at ${BACKEND_KEY}"
          fi

      # ─────────────────────────────────────────────────────────────────────────
      # ALWAYS collect a state snapshot (best-effort), even if Terraform failed
      # ─────────────────────────────────────────────────────────────────────────
      - name: Collect Terraform state snapshot (always)
        if: ${{ always() }}
        run: |
          set -euo pipefail
          SNAP="snapshot.tfstate"
          terraform state pull > "$SNAP" 2>/dev/null || true
          if [ ! -s "$SNAP" ] && [ -f ".terraform/terraform.tfstate" ]; then
            cp .terraform/terraform.tfstate "$SNAP"
          fi
          if [ ! -s "$SNAP" ]; then
            echo '{}' > "$SNAP"
          fi
          {
            echo "{"
            echo "  \"job_status\": \"${{ job.status }}\","
            echo "  \"tf_action\": \"${{ inputs.tf_action }}\","
            echo "  \"environment\": \"${{ inputs.environment }}\","
            echo "  \"timestamp_utc\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\""
            echo "}"
          } > snapshot.meta.json

      # ─────────────────────────────────────────────────────────────────────────
      # ALWAYS upload the snapshot to THE SAME BACKEND KEY
      # ─────────────────────────────────────────────────────────────────────────
      - name: Upload state snapshot to backend (always to same key)
        if: ${{ always() }}
        env:
          BACKEND_RG:        ${{ env.BACKEND_RG }}
          BACKEND_SA:        ${{ env.BACKEND_SA }}
          BACKEND_CONTAINER: ${{ env.BACKEND_CONTAINER }}
          BACKEND_KEY:       ${{ env.BACKEND_KEY }}
        run: |
          set -euo pipefail
          az group create -n "${BACKEND_RG}" -l "${BACKEND_LOCATION}" >/dev/null || true
          if ! az storage account show -n "${BACKEND_SA}" -g "${BACKEND_RG}" >/dev/null 2>&1; then
            az storage account create \
              -n "${BACKEND_SA}" -g "${BACKEND_RG}" -l "${BACKEND_LOCATION}" \
              --sku Standard_LRS --kind StorageV2 --allow-blob-public-access false --min-tls-version TLS1_2 >/dev/null
          fi
          STORAGE_KEY=$(az storage account keys list -g "${BACKEND_RG}" -n "${BACKEND_SA}" --query "[0].value" -o tsv)
          if ! az storage container show \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null 2>&1; then
            az storage container create \
              --name "${BACKEND_CONTAINER}" \
              --account-name "${BACKEND_SA}" \
              --account-key "${STORAGE_KEY}" >/dev/null
          fi
          az storage blob upload \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}" \
            --file snapshot.tfstate \
            --overwrite true >/dev/null
          az storage blob upload \
            --account-name "${BACKEND_SA}" \
            --account-key "${STORAGE_KEY}" \
            --container-name "${BACKEND_CONTAINER}" \
            --name "${BACKEND_KEY}.meta.json" \
            --file snapshot.meta.json \
            --overwrite true >/dev/null || true
